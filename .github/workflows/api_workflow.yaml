name: API Workflow

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # run every day at midnight

jobs:
  install_deps:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup poetry
        run: |
          pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.5"
          cache: 'poetry'
      - name: Install deps
        run: poetry install  

  api_test:
    needs: install_deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.5"
          token: ${{ secrets.TKN }}
          cache: 'poetry'

      - name: Run test
        env: 
          export MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
          export MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}
          export MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }} 
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          export MONGO_URI=${{ secrets.MONGO_URI }} 
        run: poetry run pytest test/test_server_api.py

  api_deploy:
    needs: api_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.5"
          cache: 'poetry'
      - name: Export poetry deps to requirements.txt
        run: poetry export --dev --format=requirements.txt --output=requirements.txt
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iis-flask:latest

  web_deploy:
    needs: api_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iis-ng:latest